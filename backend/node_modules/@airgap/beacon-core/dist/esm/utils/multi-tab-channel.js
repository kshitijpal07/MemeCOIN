import { Logger } from '@airgap/beacon-core';
import { createLeaderElection, BroadcastChannel } from 'broadcast-channel';
const logger = new Logger('MultiTabChannel');
export class MultiTabChannel {
    channel;
    elector;
    eventListeners = [
        () => this.onBeforeUnloadHandler(),
        (message) => this.onMessageHandler(message)
    ];
    onBCMessageHandler;
    onElectedLeaderHandler;
    // Auxiliary variable needed for handling beforeUnload.
    // Closing a tab causes the elector to be killed immediately
    wasLeader = false;
    constructor(name, onBCMessageHandler, onElectedLeaderHandler) {
        this.onBCMessageHandler = onBCMessageHandler;
        this.onElectedLeaderHandler = onElectedLeaderHandler;
        this.channel = new BroadcastChannel(name);
        this.elector = createLeaderElection(this.channel);
        this.init().then(() => logger.debug('MultiTabChannel', 'constructor', 'init', 'done'));
    }
    async init() {
        const hasLeader = await this.elector.hasLeader();
        if (!hasLeader) {
            await this.elector.awaitLeadership();
            this.wasLeader = this.isLeader();
        }
        this.channel.onmessage = this.eventListeners[1];
        window?.addEventListener('beforeunload', this.eventListeners[0]);
    }
    async onBeforeUnloadHandler() {
        if (this.wasLeader) {
            await this.elector.die();
            this.postMessage({ type: 'LEADER_DEAD' });
        }
        window?.removeEventListener('beforeunload', this.eventListeners[0]);
        this.channel.removeEventListener('message', this.eventListeners[1]);
    }
    async onMessageHandler(message) {
        if (message.type === 'LEADER_DEAD') {
            await this.elector.awaitLeadership();
            this.wasLeader = this.isLeader();
            if (this.isLeader()) {
                this.onElectedLeaderHandler();
            }
            return;
        }
        this.onBCMessageHandler(message);
    }
    isLeader() {
        return this.elector.isLeader;
    }
    async getLeadership() {
        return this.elector.awaitLeadership();
    }
    async hasLeader() {
        return this.elector.hasLeader();
    }
    postMessage(message) {
        this.channel.postMessage(message);
    }
}
//# sourceMappingURL=multi-tab-channel.js.map