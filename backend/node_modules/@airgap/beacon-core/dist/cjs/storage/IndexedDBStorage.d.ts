import { Storage, StorageKey, StorageKeyReturnType } from '@airgap/beacon-types';
export declare class IndexedDBStorage extends Storage {
    private readonly dbName;
    private readonly storeName;
    private db;
    private isSupported;
    constructor(dbName?: string, storeName?: string);
    private isIndexedDBSupported;
    private initDB;
    private transaction;
    get<K extends StorageKey>(key: K): Promise<StorageKeyReturnType[K]>;
    set<K extends StorageKey>(key: K, value: StorageKeyReturnType[K]): Promise<void>;
    delete<K extends StorageKey>(key: K): Promise<void>;
    getAll(): Promise<string[]>;
    getAllKeys(): Promise<IDBValidKey[]>;
    clearStore(): Promise<void>;
    getPrefixedKey<K extends StorageKey>(key: K): string;
    subscribeToStorageChanged(callback: (arg: {
        eventType: 'storageCleared' | 'entryModified';
        key: string | null;
        oldValue: string | null;
        newValue: string | null;
    }) => {}): Promise<void>;
    /**
     * it copies over all key value pairs from a source store into a target one
     * @param targetDBName the name of the target DB
     * @param targetStoreName the name of the target store
     * @param skipKeys all the keys to ignore
     */
    fillStore(targetDBName: string, targetStoreName: string, skipKeys?: string[]): Promise<void>;
}
