"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WCStorage = void 0;
const beacon_types_1 = require("@airgap/beacon-types");
const LocalStorage_1 = require("./LocalStorage");
const IndexedDBStorage_1 = require("./IndexedDBStorage");
class WCStorage {
    constructor() {
        this.localStorage = new LocalStorage_1.LocalStorage();
        this.indexedDB = new IndexedDBStorage_1.IndexedDBStorage();
        this.channel = new BroadcastChannel('WALLET_CONNECT_V2_INDEXED_DB');
        this.channel.onmessage = this.onMessage.bind(this);
        this.channel.onmessageerror = this.onError.bind(this);
    }
    onMessage(message) {
        this.onMessageHandler && this.onMessageHandler(message.data.type);
    }
    onError({ data }) {
        this.onErrorHandler && this.onErrorHandler(data);
    }
    notify(type) {
        var _a;
        (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({ type });
    }
    hasPairings() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const pairings = (_a = (yield this.indexedDB.get(beacon_types_1.StorageKey.WC_2_CORE_PAIRING))) !== null && _a !== void 0 ? _a : '[]';
            if (pairings.length) {
                return true;
            }
            if (yield LocalStorage_1.LocalStorage.isSupported()) {
                return ((_b = (yield this.localStorage.get(beacon_types_1.StorageKey.WC_2_CORE_PAIRING))) !== null && _b !== void 0 ? _b : '[]') !== '[]';
            }
            return false;
        });
    }
    hasSessions() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const sessions = (_a = (yield this.indexedDB.get(beacon_types_1.StorageKey.WC_2_CLIENT_SESSION))) !== null && _a !== void 0 ? _a : '[]';
            if (sessions.length) {
                return true;
            }
            if (yield LocalStorage_1.LocalStorage.isSupported()) {
                return ((_b = (yield this.localStorage.get(beacon_types_1.StorageKey.WC_2_CLIENT_SESSION))) !== null && _b !== void 0 ? _b : '[]') !== '[]';
            }
            return false;
        });
    }
    backup() {
        this.indexedDB
            .fillStore('beacon', 'bug_report', [beacon_types_1.StorageKey.WC_2_CORE_KEYCHAIN])
            .catch((error) => console.error(error.message));
    }
    resetState() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.indexedDB.clearStore();
            if (yield LocalStorage_1.LocalStorage.isSupported()) {
                yield Promise.all([
                    this.localStorage.delete(beacon_types_1.StorageKey.WC_2_CLIENT_SESSION),
                    this.localStorage.delete(beacon_types_1.StorageKey.WC_2_CORE_PAIRING),
                    this.localStorage.delete(beacon_types_1.StorageKey.WC_2_CORE_KEYCHAIN),
                    this.localStorage.delete(beacon_types_1.StorageKey.WC_2_CORE_MESSAGES),
                    this.localStorage.delete(beacon_types_1.StorageKey.WC_2_CLIENT_PROPOSAL),
                    this.localStorage.delete(beacon_types_1.StorageKey.WC_2_CORE_SUBSCRIPTION),
                    this.localStorage.delete(beacon_types_1.StorageKey.WC_2_CORE_HISTORY),
                    this.localStorage.delete(beacon_types_1.StorageKey.WC_2_CORE_EXPIRER)
                ]);
            }
        });
    }
}
exports.WCStorage = WCStorage;
//# sourceMappingURL=WCStorage.js.map