"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletConnectTransport = void 0;
const WalletConnectCommunicationClient_1 = require("./communication-client/WalletConnectCommunicationClient");
const beacon_types_1 = require("@airgap/beacon-types");
const beacon_core_1 = require("@airgap/beacon-core");
/**
 * @internalapi
 *
 *
 */
class WalletConnectTransport extends beacon_core_1.Transport {
    constructor(name, _keyPair, storage, storageKey, wcOptions, isLeader) {
        super(name, WalletConnectCommunicationClient_1.WalletConnectCommunicationClient.getInstance(wcOptions, isLeader), new beacon_core_1.PeerManager(storage, storageKey));
        this.wcOptions = wcOptions;
        this.isLeader = isLeader;
        this.type = beacon_types_1.TransportType.WALLETCONNECT;
    }
    static isAvailable() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(true);
        });
    }
    connect() {
        const _super = Object.create(null, {
            connect: { get: () => super.connect }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if ([beacon_types_1.TransportStatus.CONNECTED, beacon_types_1.TransportStatus.CONNECTING].includes(this._isConnected)) {
                return;
            }
            this._isConnected = beacon_types_1.TransportStatus.CONNECTING;
            const isLeader = yield this.isLeader();
            if (isLeader) {
                yield this.client.init();
            }
            const knownPeers = yield this.getPeers();
            if (knownPeers.length > 0) {
                knownPeers.map((peer) => __awaiter(this, void 0, void 0, function* () { return this.listen(peer.publicKey); }));
            }
            yield this.startOpenChannelListener();
            yield _super.connect.call(this);
            if (!isLeader) {
                this._isConnected = beacon_types_1.TransportStatus.SECONDARY_TAB_CONNECTED;
            }
        });
    }
    wasDisconnectedByWallet() {
        return !!this.client.disconnectionEvents.size;
    }
    closeClient() {
        this.client.closeSignClient();
    }
    hasPairings() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.client.storage.hasPairings())
                ? true
                : !!((_b = (_a = this.client.signClient) === null || _a === void 0 ? void 0 : _a.pairing.getAll()) === null || _b === void 0 ? void 0 : _b.length);
        });
    }
    hasSessions() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.client.storage.hasSessions())
                ? true
                : !!((_b = (_a = this.client.signClient) === null || _a === void 0 ? void 0 : _a.session.getAll()) === null || _b === void 0 ? void 0 : _b.length);
        });
    }
    getPeers() {
        return __awaiter(this, void 0, void 0, function* () {
            const client = WalletConnectCommunicationClient_1.WalletConnectCommunicationClient.getInstance(this.wcOptions, this.isLeader);
            const session = client.currentSession();
            if (!session) {
                return [];
            }
            return [
                {
                    senderId: session.peer.publicKey,
                    extensionId: session.peer.metadata.name,
                    id: session.peer.publicKey,
                    type: 'walletconnect-pairing-response',
                    name: 'peer',
                    publicKey: session.peer.publicKey,
                    version: 'first'
                }
            ];
        });
    }
    disconnect() {
        const _super = Object.create(null, {
            disconnect: { get: () => super.disconnect }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.close();
            return _super.disconnect.call(this);
        });
    }
    startOpenChannelListener() {
        return __awaiter(this, void 0, void 0, function* () {
            //
        });
    }
    doClientCleanup() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.unsubscribeFromEncryptedMessages();
        });
    }
    getPairingRequestInfo() {
        return this.client.getPairingRequestInfo();
    }
    listen(publicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client
                .listenForEncryptedMessage(publicKey, (message) => {
                const connectionContext = {
                    origin: beacon_types_1.Origin.WALLETCONNECT,
                    id: publicKey
                };
                this.notifyListeners(message, connectionContext).catch((error) => {
                    throw error;
                });
            })
                .catch((error) => {
                throw error;
            });
        });
    }
}
exports.WalletConnectTransport = WalletConnectTransport;
//# sourceMappingURL=WalletConnectTransport.js.map