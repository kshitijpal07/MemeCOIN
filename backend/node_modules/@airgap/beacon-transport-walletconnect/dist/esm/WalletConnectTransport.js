import { WalletConnectCommunicationClient } from './communication-client/WalletConnectCommunicationClient';
import { Origin, TransportStatus, TransportType } from '@airgap/beacon-types';
import { Transport, PeerManager } from '@airgap/beacon-core';
/**
 * @internalapi
 *
 *
 */
export class WalletConnectTransport extends Transport {
    wcOptions;
    isLeader;
    type = TransportType.WALLETCONNECT;
    constructor(name, _keyPair, storage, storageKey, wcOptions, isLeader) {
        super(name, WalletConnectCommunicationClient.getInstance(wcOptions, isLeader), new PeerManager(storage, storageKey));
        this.wcOptions = wcOptions;
        this.isLeader = isLeader;
    }
    static async isAvailable() {
        return Promise.resolve(true);
    }
    async connect() {
        if ([TransportStatus.CONNECTED, TransportStatus.CONNECTING].includes(this._isConnected)) {
            return;
        }
        this._isConnected = TransportStatus.CONNECTING;
        const isLeader = await this.isLeader();
        if (isLeader) {
            await this.client.init();
        }
        const knownPeers = await this.getPeers();
        if (knownPeers.length > 0) {
            knownPeers.map(async (peer) => this.listen(peer.publicKey));
        }
        await this.startOpenChannelListener();
        await super.connect();
        if (!isLeader) {
            this._isConnected = TransportStatus.SECONDARY_TAB_CONNECTED;
        }
    }
    wasDisconnectedByWallet() {
        return !!this.client.disconnectionEvents.size;
    }
    closeClient() {
        this.client.closeSignClient();
    }
    async hasPairings() {
        return (await this.client.storage.hasPairings())
            ? true
            : !!this.client.signClient?.pairing.getAll()?.length;
    }
    async hasSessions() {
        return (await this.client.storage.hasSessions())
            ? true
            : !!this.client.signClient?.session.getAll()?.length;
    }
    async getPeers() {
        const client = WalletConnectCommunicationClient.getInstance(this.wcOptions, this.isLeader);
        const session = client.currentSession();
        if (!session) {
            return [];
        }
        return [
            {
                senderId: session.peer.publicKey,
                extensionId: session.peer.metadata.name,
                id: session.peer.publicKey,
                type: 'walletconnect-pairing-response',
                name: 'peer',
                publicKey: session.peer.publicKey,
                version: 'first'
            }
        ];
    }
    async disconnect() {
        await this.client.close();
        return super.disconnect();
    }
    async startOpenChannelListener() {
        //
    }
    async doClientCleanup() {
        await this.client.unsubscribeFromEncryptedMessages();
    }
    getPairingRequestInfo() {
        return this.client.getPairingRequestInfo();
    }
    async listen(publicKey) {
        await this.client
            .listenForEncryptedMessage(publicKey, (message) => {
            const connectionContext = {
                origin: Origin.WALLETCONNECT,
                id: publicKey
            };
            this.notifyListeners(message, connectionContext).catch((error) => {
                throw error;
            });
        })
            .catch((error) => {
            throw error;
        });
    }
}
//# sourceMappingURL=WalletConnectTransport.js.map